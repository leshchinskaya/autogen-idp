{
    "skills": [
      {
        "name": "Использование AI для ручных QA",
        "fromLevel": 0,
        "toLevel": 4,
        "tasks": [
          {
            "title": "Сформировать карту AI-инструментов для ручного тестирования",
            "description": "Собрать список минимум из 5 актуальных AI-сервисов (ChatGPT, Gemini, Testim, Mabl и др.), описать их функции в ручном QA, стоимость, ограничения и примеры использования в таблице Confluence.",
            "expectedResult": "Опубликована таблица сравнения; коллеги могут выбрать инструмент по нужным критериям."
          },
          {
            "title": "Прототип генерации тест-кейсов с помощью LLM",
            "description": "Создать промпт и получить с помощью ChatGPT не менее 20 тест-кейсов для одного критического пользовательского сценария продукта; оформить их в формат TMS и провести ревью с командой.",
            "expectedResult": "Прототип одобрен на ревью, не менее 80 % кейсов признаны пригодными без правок."
          },
          {
            "title": "Библиотека промптов для ручного QA",
            "description": "Разработать и задокументировать 10 готовых промптов: генерация позитивных/негативных кейсов, идеи для смоук-тестов, чек-лист UX-проверок и др.; добавить их в корпоративный репозиторий.",
            "expectedResult": "Библиотека доступна в Git; минимум 2 других тестировщика используют её в работе в течение спринта."
          },
          {
            "title": "Автоматическое резюме сессий exploratory testing",
            "description": "Настроить скрипт (Python + OpenAI API): из тестовых заметок в Notion формировать конспект и список дефектов; запускать через GitHub Actions после каждой сессии.",
            "expectedResult": "Скрипт создаёт summary-файл <2 мин; тест-лиды подтверждают снижение времени на отчёт ≥50 %."
          },
          {
            "title": "Обучающий воркшоп по AI-техникам для QA-команды",
            "description": "Подготовить 2-часовой тренинг: теория + live-демо + практическое задание; разработать материалы и чек-лист оценки знаний.",
            "expectedResult": "Участники (≥80 % команды) проходят пост-тест с результатом ≥70 %; проводят AI-сессию самостоятельно в следующем спринте."
          },
          {
            "title": "Метрика внедрения AI в ручной QA",
            "description": "Определить KPI (доля кейсов, сгенерированных ИИ; экономия времени) и построить дашборд в Grafana, обновляемый раз в сутки из Jira/Tempo.",
            "expectedResult": "Дашборд отображает данные за 3 последовательных спринта; по ним принимаются решения на ретроспективе."
          }
        ]
      },
      {
        "name": "Использование AI для AQA",
        "fromLevel": 0,
        "toLevel": 1,
        "tasks": [
          {
            "title": "Интеграция AI-ассистента в IDE",
            "description": "Установить и настроить GitHub Copilot или Cursor в основном рабочем IDE (IntelliJ/PyCharm); настроить корпоративный прокси и проверить работу на репозитории автотестов.",
            "expectedResult": "AI-ассистент предлагает автокомплит не менее чем в 3 файлах подряд без ошибок подключения."
          },
          {
            "title": "Генерация каркаса автотеста через LLM",
            "description": "С помощью AI-ассистента сгенерировать тест на REST-эндпоинт: предусмотреть setup/teardown, проверки статус-кода и схемы ответа; оформить PR в репозиторий.",
            "expectedResult": "PR принят без критических комментариев; тест проходит в CI и выполняется <30 сек."
          },
          {
            "title": "Скрипт AI-генерации тестовых данных",
            "description": "Написать Python-утилиту, запрашивающую у ChatGPT 50 валидных и 50 невалидных JSON-записей по заданной схеме; сохранять результат в fixtures/*.json.",
            "expectedResult": "Файл данных генерируется <1 мин и используется минимум в 2 автотестах без доработок."
          },
          {
            "title": "AI-ревью кода автотестов",
            "description": "Создать промпт-шаблон для ChatGPT/Gemini, анализирующий PR автотестов: проверка читаемости, анти-паттернов Page Object, дублирований; интегрировать в PR-шаблон GitHub.",
            "expectedResult": "В 3 последующих PR наблюдается ≥30 % меньше замечаний от менторов по стилю кода."
          }
        ]
      }
    ]
  }
  